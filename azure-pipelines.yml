# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

variables:
  ConnectedServiceName: 'Pay-As-You-Go (7a2efedb-22fb-4344-bf58-c4b1a17f440a)'
  WebAppName: 'clt-homicide-uat'

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python36:
      PYTHON_VERSION: '3.6'
    Python37:
      PYTHON_VERSION: '3.7'
  maxParallel: 3

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    python manage.py test tracker --no-input
  displayName: 'Run tests'

# # reports path ok ?
# - script: |     
#    pytest --junitxml=reports/django-basic.xml     
#   displayName: 'Run pytests'

# # reports path ok ?
# - task: PublishTestResults@2
#   inputs:
#     testResultsFiles: 'reports/django-basic.xml'
#     testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
#   condition: succeededOrFailed()

# $(System.DefaultWorkingDirectory)/Application
- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.BinariesDirectory)'
    includeRootFolder: true
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
    replaceExistingArchive: true
  displayName: 'Archive build'

# - task: ArchiveFiles@2
#   inputs:
#     rootFolderOrFile: '$(Build.BinariesDirectory)/Tests'
#     includeRootFolder: true
#     archiveType: 'zip'
#     archiveFile: '$(Build.ArtifactStagingDirectory)/Tests$(Build.BuildId).zip'
#     replaceExistingArchive: true
#   displayName: 'Archive tests'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
  displayName: 'Publish Artifacts'

# - task: PublishPipelineArtifact@1
#   inputs:
#     targetPath: '$(Pipeline.Workspace)'
#     artifact: 'test'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
    replaceExistingArchive: true
    verbose: # (no value); this input is optional
  displayName: 'Zip it up'

- task: AzureRMWebAppDeployment@4
  displayName: Azure App Service Deploy
  inputs:
    appType: webAppLinux
    RuntimeStack: 'PYTHON|3.6'
    ConnectedServiceName: $(ConnectedServiceName)
    WebAppName: $(WebAppName)
    Package: '$(Build.ArtifactStagingDirectory)/Application$(Build.BuildId).zip'
  displayName: 'Deply it ?'
